name: Release Builds

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      buildwin:
        type: boolean
      buildosx:
        type: boolean
      buildlin:
        type: boolean
      buildlinaarch64:
        type: boolean
jobs:
  build-win:
    runs-on: macos-latest
    if: ${{ contains(github.event.head_commit.message, 'new release') || (github.event_name == 'workflow_dispatch' && github.event.inputs.buildwin == 'true') }}
    steps:
      - uses: actions/checkout@v3
      - name: Get Nim
        run: |
          curl -L https://github.com/nim-lang/nightlies/releases/download/latest-version-2-0/macosx_x64.tar.xz --output macosx_x64.tar.xz
          tar xf macosx_x64.tar.xz
      - name: Configure Nim
        run: |
          echo "${PWD}/nim-2.0.1/bin" >> $GITHUB_PATH
          echo "$HOME/.nimble/bin" >> $GITHUB_PATH
      - name: Test Nim
        run: nim -v
      - name: dependencies
        run: nimble install -d -Y
      - name: cross compiler
        run: nimble install https://github.com/iffy/nimxc.git

      - name: build windows (aelm-win-x64.exe)
        run: |
          nimxc c -d:mingw -d:release --target windows-amd64 src/aelm
          mv src/aelm.exe aelm-win-x64.exe

      - name: Upload Windows Binary
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: aelm-win-x64.exe
          asset_name: aelm-win-x64.exe
          tag: latest
          overwrite: true

  build-old-win:
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.head_commit.message, 'new release') || (github.event_name == 'workflow_dispatch' && github.event.inputs.buildoldwin == 'true') }}
    steps:
      - uses: actions/checkout@v3
      #- uses: ilammy/msvc-dev-cmd@v1
      #- uses: egor-tensin/setup-mingw@v2
      #  with:
      #    platform: x64
      - uses: jiro4989/setup-nim-action@v1
        with:
          nim-version: '2.0.0' # default is 'stable'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
            #- run: nimble build -Y
      #- name: Add Nim Path
      #  run: echo "$HOME/.nimble/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Test Nim
        run: nim -v
      - name: dependencies
        run: nimble install -d -Y
      - name: cross compiler
        run: nimble install https://github.com/iffy/nimxc.git
      - name: build
        run: nimxc c -d:mingw --target windows-amd64 src/aelm
      - name: Run UPX
        uses: crazy-max/ghaction-upx@v1
        with:
          version: latest
          files: ./src/aelm.exe
          args: --best -q
      - name: Upload Windows Binary
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: src/aelm.exe
          asset_name: aelm-win-x64.exe
          tag: latest
          overwrite: true
  build-linux:
    runs-on: ubuntu-latest
    container:
      image: centos:7 #centos/devtoolset-7-toolchain-centos7
    if: ${{ contains(github.event.head_commit.message, 'new release') || (github.event_name == 'workflow_dispatch' && github.event.inputs.buildlin == 'true') }}
    steps:
      - uses: actions/checkout@v3
      - name: Load cached system packages
        id: cache-rpm
        uses: actions/cache@v2
        with:
          path: |
            /var/cache/yum/x86_64/7/base/packages
          key: centos7packages
      - name: Install DevTools
        run: |
          yum install -y epel-release
          yum -y install https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm
          yum install gcc autoconf automake make binutils glibc glibc-devel glibc-static git -y
      - uses: iffy/install-nim@v5
      - name: Get Nim
        run: nimble install -y
      - name: Test Nim first
        run: nim -v
      - name: build
        run: nimble build -y
      - name: Run UPX
        uses: crazy-max/ghaction-upx@v1
        with:
          version: latest
          files: ./aelm
          args: --best -q
      - name: Upload Linux Binary
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: aelm
          asset_name: aelm-linux-x64
          tag: latest
          overwrite: true
  build-mac:
    runs-on: macos-latest
    if: ${{ contains(github.event.head_commit.message, 'new release') || (github.event_name == 'workflow_dispatch' && github.event.inputs.buildosx == 'true') }}
    steps:
      - uses: actions/checkout@v2
      #- uses: iffy/install-nim@v5
      - name: Get Nim
        run: |
          curl -L https://github.com/nim-lang/nightlies/releases/download/latest-version-2-0/macosx_x64.tar.xz --output macosx_x64.tar.xz
          tar xf macosx_x64.tar.xz
      - name: Configure Nim
        run: |
          echo "${PWD}/nim-2.0.1/bin" >> $GITHUB_PATH
          echo "$HOME/.nimble/bin" >> $GITHUB_PATH
      - name: Test Nim
        run: nim -v
      - name: Build package
        run: |
          #echo "building target..."
          echo "building x86_64 target..."
          sudo xcode-select --switch /Applications/Xcode_13.1.app
          echo "MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx12.0 --show-sdk-platform-version)" >> $GITHUB_ENV
          echo "SDKROOT=$(xcrun -sdk macosx12.0 --show-sdk-path)" >> $GITHUB_ENV
          nimble build --passL:"'-target x86_64-apple-macos12.0'" --passC:"'-target x86_64-apple-macos12.0'" -y
          strip aelm
          mv aelm aelm.x64
          echo "building arm64 target..."
          sudo xcode-select --switch /Applications/Xcode_14.2.app
          echo "MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx13.1 --show-sdk-platform-version)" >> $GITHUB_ENV
          echo "SDKROOT=$(xcrun -sdk macosx13.1 --show-sdk-path)" >> $GITHUB_ENV
          nimble build -d:m1 --cpu:arm64 --passL:"'-target arm64-apple-macos13.1'" --passC:"'-target arm64-apple-macos13.1'" -y
          strip aelm
          mv aelm aelm.arm64
      - name: Pack Fat Universal Binary
        run: |
          echo "building universal executable..."
          lipo -create -output aelm aelm.arm64 aelm.x64
      - name: Upload OSX Binary
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: aelm
          asset_name: aelm-osx-universal
          tag: latest
          overwrite: true
  build-linux-aarch64:
    runs-on: ubuntu-latest
    container:
      image: centos:7 #centos/devtoolset-7-toolchain-centos7
    if: ${{ contains(github.event.head_commit.message, 'new release') || (github.event_name == 'workflow_dispatch' && github.event.inputs.buildlinaarch64 == 'true') }}
    steps:
      - uses: actions/checkout@v2
      - name: Install DevTools
        run: |
          yum install -y epel-release
          yum -y install https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm
          yum install -y gcc autoconf automake make binutils glibc glibc-devel glibc-static git -y
      - uses: iffy/install-nim@v5
      - name: Test Nim
        run: nim -v
      - name: Configure Zig
        #if: steps.cache-nim.outputs.cache-hit != 'true'
        run: |
          curl -ozig.tar.xz -L "https://ziglang.org/download/0.11.0/zig-linux-x86_64-0.11.0.tar.xz"
          tar xf zig.tar.xz
          mv zig-linux-x86_64-0.11.0 zig
          echo "#!/bin/env sh" > zig/gcc
          echo "$PWD/zig/zig cc -target aarch64-linux-gnu \$@" >> zig/gcc
          chmod +x zig/gcc
      - name: Nimble Deps
        #if: steps.cache-nim.outputs.cache-hit != 'true'
        run: nimble install -d -Y
        #run: |
        #  nimble install -y yaml
        #  nimble install -y zstd
        #  nimble install -y zippy
        #  nimble install -y puppy
        #  nimble install -y q
        #  nimble install -y regex
      - name: Show Paths
        run: |
          nimble path yaml
          nimble path puppy
      - name: Investigate Nimble
        run: |
          echo "try second location"
          ls -lah ~/.nimble/pkgs
      - name: Build Aelm
        run: |
          rm src/config.nims
          nim c -d:release -d:danger -l:-s --opt:size --cpu:arm64 --os:linux -d:cputype=arm --arm64.linux.gcc.exe=zig/gcc --arm64.linux.gcc.linkerexe=zig/gcc -o:aelm src/aelm.nim
      - name: Run UPX
        uses: crazy-max/ghaction-upx@v1
        with:
          version: latest
          files: ./aelm
          args: --best -q
      - name: Upload Linux aarch64 Binary
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: aelm
          asset_name: aelm-linux-arm64v8
          tag: latest
          overwrite: true
